#PLATFORM ?= IOS
PLATFORM ?= OSX

ROOT_APP_NAME:=demo
APP_NAME=${ROOT_APP_NAME}_${PLATFORM}

TARGET : ${APP_NAME}

INCLUDE_PATHS=. engine engine/render/metal osx/metal-cpp
INCLUDE_OPTIONS+=$(foreach f,${INCLUDE_PATHS},-I$f)

CFLAGS=-Wall -c ${INCLUDE_OPTIONS} -DIN_PLATFORM_${PLATFORM}=1  -DIN_PLATFORM_APPLE=1

CONFIG_PATH=debug
ifdef RELEASE
CFLAGS+=-O2 -DNDEBUG
CONFIG_PATH=release
$(info Optimizations enabled)
else
CFLAGS+=-g -O0
endif

ifdef ASAN
$(info Asan enabled)
ASAN_FLAGS=-fsanitize=address -fno-omit-frame-pointer
endif

CFLAGS+=${ASAN_FLAGS}

CXXFLAGS=${CFLAGS} -std=c++17 -fno-exceptions -fno-objc-arc
cooker: CXXFLAGS := ${CFLAGS} -std=c++20 -fno-objc-arc

FRAMEWORKS=Foundation Metal MetalKit AudioToolbox GameKit

ifeq (${PLATFORM}, OSX)
	FRAMEWORKS+=QuartzCore Cocoa AppKit
	SRCS=main_osx imgui_impl_metal
	ARCH_FLAGS=-target x86_64-apple-macos14s -mavx2
	LIBS+=-F/System/Library/Frameworks
else ifeq (${PLATFORM}, ARM)
	FRAMEWORKS+=QuartzCore Cocoa AppKit
	SRCS=main_osx
	ARCH_FLAGS=-target arm64-apple-macos14
	LIBS+=-F/System/Library/Frameworks
else
	FRAMEWORKS+=UIKit CoreMotion Security CoreLocation
	SRCS=main_ios 
	SYSROOT=$(shell xcrun --show-sdk-path --sdk iphoneos)
	ARCH_FLAGS=-target arm64-apple-ios14 -isysroot ${SYSROOT}
	CXXFLAGS+=-arch arm64
	LIBS+=-lsoloud_static -lcurl -lz 
endif

LNKFLAGS+=${ARCH_FLAGS}
CFLAGS+=${ARCH_FLAGS}
CXXFLAGS+=${ARCH_FLAGS}

LIBS+=$(foreach f,${FRAMEWORKS},-framework $f)
LIBS+=-lstdc++ ${ASAN_FLAGS}
LIBS+=-Lapple/libs_${PLATFORM}/${CONFIG_PATH}/

OBJS_PATH=objs/${PLATFORM}/${CONFIG_PATH}

# Get All module sources
MODULE_SRCS=$(foreach f,$(shell find engine/modules -name "*.cpp"),${notdir ${basename $f}})

SRCS+=apple_platform \
     geometry transform camera angular sdf \
     render primitives \
     json json_file \
     utils \
     resources_manager \
     render_platform \
     imgui imgui_draw imgui_widgets imgui_tables ImGuizmo \
     viscoelastic viscoelastic_sim \
     ${MODULE_SRCS} \

#SRCS=demo
OBJS=$(foreach f,${SRCS},$(OBJS_PATH)/$(basename $f).o)

VPATH=${shell find engine -type d| grep -v objs | grep -v common} osx experiments tools

$(info OBJS is ${OBJS})

tools : cooker

#COMMON_DEPS=${wildcard *.h} Makefile
COMMON_DEPS=

$(OBJS_PATH)/%.o : %.c ${COMMON_DEPS} | $(OBJS_PATH)
	@echo C $@
	@$(CC) ${CFLAGS} -fobjc-arc -x objective-c $< -o $@

$(OBJS_PATH)/%.o : %.cpp ${COMMON_DEPS} | $(OBJS_PATH)
	@echo C++ $@
	@$(CC) ${CXXFLAGS} $< -o $@
	
$(OBJS_PATH)/%.o : %.mm ${COMMON_DEPS} | $(OBJS_PATH)
	@echo Compiling $@
	@$(CC) $(CXXFLAGS) $< -o $@

$(APP_NAME) : ${OBJS} | Makefile
	@echo Linking $@
	@$(CC) $+ ${LNKFLAGS} $(LIBS) -o $@

$(OBJS_PATH) :
	@echo Creating temporal folder $(OBJS_PATH)
	@mkdir -p $(OBJS_PATH)

assets : 
	@make --no-print-directory -C assets -j -r

SHADER_NAMES=laser explosion font ui basic dual_contour
SHADER_LIB=data/shaders.metallib
SHADERS_IRS_PATH=objs/OSX/shaders
SHADER_FLAGS=-O3 -ffast-math -I .
SHADER_FILENAMES=$(foreach f,${SHADER_NAMES},data/shaders/${f}.metal)
SHADER_IRS=$(foreach f,${SHADER_NAMES},${SHADERS_IRS_PATH}/${f}.ir) 

${SHADERS_IRS_PATH}/%.ir : data/shaders/%.metal
	@echo Shader $<
	@mkdir -p ${SHADERS_IRS_PATH}
	@xcrun -sdk macosx metal -o $@ -c $< ${SHADER_FLAGS}

${SHADER_LIB} : ${SHADER_IRS} 
	@echo Shader Library $<
	@xcrun -sdk macosx metallib -o ${SHADER_LIB} $+

shaders : ${SHADER_LIB} 
	@echo All shaders compiled

clean :
	rm -rf objs
	rm -f ${ROOT_APP_NAME}*

help :
	@echo "  make osx                        # Build OSX"
	@echo "  make osx RELEASE=1              # Build OSX in shipping"
	@echo "  make ios                        # Build iOS"
	@echo "  make install                    # Build and install iOS"
	@echo "  make tools                      # Build tools for osx"
	@echo "  make assets                     # Cook assets from assets -> data"

osx :
	@make --no-print-directory PLATFORM=OSX -j -r

ios:
	@make --no-print-directory PLATFORM=IOS -j -r

universal_osx :
	@make --no-print-directory PLATFORM=OSX -j -r
	@make --no-print-directory PLATFORM=ARM -j -r
	@echo Creating Universal Binary
	@lipo -create -output ${ROOT_APP_NAME}_universal ${ROOT_APP_NAME}_OSX ${ROOT_APP_NAME}_ARM

# ######
PROJECT_NAME=nergysdemo
PACKAGE_NAME=NergysDemo
# The product of this script. This is the actual app bundle!
BUNDLE_DIR=${PACKAGE_NAME}.app
PLIST_BUDDY=/usr/libexec/PlistBuddy
INFO_PLIST=${BUNDLE_DIR}/Info.plist
APP_BUNDLE_IDENTIFIER=com.juanabadia.${PROJECT_NAME}
CERTIFICATE_MATCHING_PATTERN=${APP_BUNDLE_IDENTIFIER}
# To use a generic certifficate generated by xcode
#CERTIFICATE_MATCHING_PATTERN${TEAM_IDENTIFIER.*}

# security cms -D -i mobileprovision
EMBEDDED_PROVISIONING_PROFILE=${BUNDLE_DIR}/embedded.mobileprovision
TEAM_IDENTIFIER=B2JNF87849
XCENT_FILE=${OBJS_PATH}/${PROJECT_NAME}.xcent
# List signing identities: security find-identity -v -p codesigning
IDENTITY=DCF2EC1B4903712A423E3E30B50A95ED12FC00CB
BUNDLE_TMP_PATH=${OBJS_PATH}/build
COMPILED_ASSETS_CATALOG=${BUNDLE_TMP_PATH}/Assets.car
IN_ASSETS_CATALOG=assets/ios/Assets.xcassets
IN_INFO_PLIST=assets/ios/Info.plist

${COMPILED_ASSETS_CATALOG} : ${IN_ASSETS_CATALOG}/AppIcon.appiconset/*
	@mkdir -p ${BUNDLE_TMP_PATH}
	actool --output-format human-readable-text \
             --compress-pngs \
             --app-icon AppIcon \
             --platform iphoneos \
             --target-device iphone \
             --minimum-deployment-target 13.0 \
             --output-partial-info-plist ${BUNDLE_TMP_PATH}/Assets.plist \
             --compile ${BUNDLE_TMP_PATH} \
             ${IN_ASSETS_CATALOG}

icons : ${COMPILED_ASSETS_CATALOG}

ipa: 
	rm -f ${BUNDLE_DIR}.ipa
	mkdir -p Payload
	mv ${BUNDLE_DIR} Payload
	zip -r $ ${BUNDLE_DIR}.ipa Payload
	mv Payload ${BUNDLE_DIR} 

install: PLATFORM := IOS
install: ios icons
	@echo ✅ Creating App bundle for IOS
	@rm -rf ${BUNDLE_DIR}
	@mkdir -p ${BUNDLE_DIR}

	@echo ✅ Copy Game Binary ${PLATFORM}
	@cp ${APP_NAME} ${BUNDLE_DIR}/${PACKAGE_NAME}

	@echo ✅ Merge assets.plist with info.plist
	@cp ${IN_INFO_PLIST} ${INFO_PLIST}
	@${PLIST_BUDDY} -c "Merge ${BUNDLE_TMP_PATH}/Assets.plist" ${INFO_PLIST}

	@echo ✅ Copy compiled assets and icons
	@cp ${BUNDLE_TMP_PATH}/AppIcon*.png ${BUNDLE_DIR}
	@cp ${COMPILED_ASSETS_CATALOG} ${BUNDLE_DIR}

	@echo ✅ Copy Game resources
	@rsync -av data ${BUNDLE_DIR} \
		--exclude="plugins" \
		--exclude="*.hlsl" \
		--exclude=".DS_Store" 

	@echo ✅ Find certificate
	@PROVISIONING_PROFILE_NAME=${shell apple/find_certificate.sh ${CERTIFICATE_MATCHING_PATTERN}}; \
	if [[ -z $$PROVISIONING_PROFILE_NAME ]] ; then echo ❌ No certificate found matching ${APP_BUNDLE_IDENTIFIER}; exit -1 ; fi ; \
	cp "${HOME}/Library/MobileDevice/Provisioning Profiles/$$PROVISIONING_PROFILE_NAME" ${EMBEDDED_PROVISIONING_PROFILE}

	@echo ✅ Sign bundle
	@rm -f ${XCENT_FILE}
	@${PLIST_BUDDY} -c "Add :application-identifier string ${TEAM_IDENTIFIER}.${APP_BUNDLE_IDENTIFIER}" ${XCENT_FILE}
	@${PLIST_BUDDY} -c "Add :com.apple.developer.team-identifier string ${TEAM_IDENTIFIER}" ${XCENT_FILE}
	@${PLIST_BUDDY} -c "Add :get-task-allow bool true" ${XCENT_FILE}
	@/usr/bin/codesign \
 		--force \
 		--timestamp=none \
 		--sign ${IDENTITY} \
 		--entitlements ${XCENT_FILE} \
 		--generate-entitlement-der \
 		${BUNDLE_DIR}

	@echo ✅ Verify signature
	@codesign -v ${BUNDLE_DIR}

	@echo ✅ Install bundle in connected device
	ios-deploy -b ${BUNDLE_DIR}

#${PLIST_BUDDY} -c "Add :CFBundleExecutable string ${PROJECT_NAME}" ${INFO_PLIST}
#${PLIST_BUDDY} -c "Add :CFBundleIdentifier string ${APP_BUNDLE_IDENTIFIER}" ${INFO_PLIST}
#${PLIST_BUDDY} -c "Add :CFBundleName string ${PROJECT_NAME}" ${INFO_PLIST}

.phony : clean all tools icons osx ios assets
